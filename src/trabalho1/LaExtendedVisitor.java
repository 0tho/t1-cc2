package trabalho1;

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class LaExtendedVisitor extends LaBaseVisitor<Object> {

  private HashMap<String, Tipo> tipos = new HashMap<String, Tipo>();

  private int autoGeneratedTypes = 0;

  @Override
  public Void visitPrograma(LaParser.ProgramaContext ctx) {
    tipos.put("literal", new Tipo("literal"));
    tipos.put("inteiro", new Tipo("inteiro"));
    tipos.put("real", new Tipo("real"));
    tipos.put("logico", new Tipo("logico"));

    visitChildren(ctx);
    return null;
  }

  @Override
  public Void visitDeclareTipo(LaParser.DeclareTipoContext ctx) {
    String tipoId = ctx.IDENT().getText();
    int linha = ctx.getStart().getLine();
    Object tipoVisit = visit(ctx.tipo());

    if ( tipoVisit instanceof String ) {
      String tipoVisitId = (String) tipoVisit;
      if( tipos.containsKey ( tipoVisitId ) ) {
        Tipo novoTipo = new Tipo(tipoId, tipoVisitId);
        tipos.put(tipoId, novoTipo);
      } else {

        Lac.errorBuffer.println(Mensagens.erroTipoNaoDeclarado( linha, tipoId ));
      }
    } else if ( tipoVisit instanceof List ) {
      Tipo novoTipo = new Tipo(tipoId);
      tipos.put(tipoId, novoTipo);

      List<Simbolo> simbolosTipo = (List<Simbolo>) tipoVisit;
      for( Simbolo simbolo : simbolosTipo) {
        novoTipo.addSimbolo( simbolo );
      }
    }

    return null;
  }

  @Override
  public Object visitTipoRegistro(LaParser.TipoRegistroContext ctx) {
    return visit(ctx.registro());
  }

  @Override
  public Object visitRegistro(LaParser.RegistroContext ctx) {
    ArrayList<Simbolo> registroSimbolos = new ArrayList<Simbolo>();

    for (LaParser.VariavelContext variavel : ctx.variavel()) {
      List<Simbolo> simbolos = (List<Simbolo>) visit(variavel);
      registroSimbolos.addAll(simbolos);
    }

    return registroSimbolos;
  }

  @Override
  public Object visitTipoReferencia(LaParser.TipoReferenciaContext ctx) {
    return ctx.tipo_estendido().getText();
  }

  @Override
  public Object visitVariavel(LaParser.VariavelContext ctx) {
    ArrayList<Simbolo> simbolos = new ArrayList<Simbolo>();
    // Get name list
    ArrayList<String> ids = new ArrayList<String>();
    ids.add(ctx.IDENT().getText());

    for (LaParser.Mais_varContext mais_var : ctx.mais_var()) {
      String id = (String) visit(mais_var);
      ids.add(id);
    }

    // Get Type
    Object visitTipo = visit(ctx.tipo());

    if ( visitTipo instanceof String ) {
      String tipoId = (String) visitTipo;
      if( tipos.containsKey ( tipoId ) ) {
        // if type is registered add symbols
        for( String id : ids ) {
          simbolos.add(new Simbolo( id, tipoId));
        }
      } else {
        // else warn error
        int linha = ctx.getStart().getLine();
        Lac.errorBuffer.println(Mensagens.erroTipoNaoDeclarado( linha, tipoId ));
      }
    } else if ( visitTipo instanceof List ) {
      String tipoId = "@" + autoGeneratedTypes;
      autoGeneratedTypes++;

      Tipo novoTipo = new Tipo(tipoId);
      tipos.put(tipoId, novoTipo);

      List<Simbolo> simbolosTipo = (List<Simbolo>) visitTipo;
      for( Simbolo simbolo : simbolosTipo) {
        novoTipo.addSimbolo( simbolo );
      }

      for( String id : ids ) {
        simbolos.add(new Simbolo( id, tipoId));
      }
    }

    return simbolos;
  }

  @Override
  public Object visitMais_var(LaParser.Mais_varContext ctx) {
    return ctx.IDENT().getText();
  }

 }
